
import pandas as pd
data=pd.read_csv("https://raw.githubusercontent.com/sunnysavita10/credit_card_pw_hindi/main/creditCardFraud_28011964_120214.csv")
data.head(15)
LIMIT_BAL	SEX	EDUCATION	MARRIAGE	AGE	PAY_0	PAY_2	PAY_3	PAY_4	PAY_5	...	BILL_AMT4	BILL_AMT5	BILL_AMT6	PAY_AMT1	PAY_AMT2	PAY_AMT3	PAY_AMT4	PAY_AMT5	PAY_AMT6	default payment next month
0	50000	1	2	1	57	-1	0	-1	0	0	...	20940	19146	19131	2000	36681	10000	9000	689	679	0
1	50000	1	1	2	37	0	0	0	0	0	...	19394	19619	20024	2500	1815	657	1000	1000	800	0
2	500000	1	1	2	29	0	0	0	0	0	...	542653	483003	473944	55000	40000	38000	20239	13750	13770	0
3	100000	2	2	2	23	0	-1	-1	0	0	...	221	-159	567	380	601	0	581	1687	1542	0
4	140000	2	3	1	28	0	0	2	0	0	...	12211	11793	3719	3329	0	432	1000	1000	1000	0
5	20000	1	3	2	35	-2	-2	-2	-2	-1	...	0	13007	13912	0	0	0	13007	1122	0	0
6	200000	2	3	2	34	0	0	2	0	0	...	2513	1828	3731	2306	12	50	300	3738	66	0
7	260000	2	1	2	51	-1	-1	-1	-1	-1	...	8517	22287	13668	21818	9966	8583	22301	0	3640	0
8	630000	2	2	2	41	-1	0	-1	-1	-1	...	6500	6500	2870	1000	6500	6500	6500	2870	0	0
9	70000	1	2	2	30	1	2	2	0	0	...	66782	36137	36894	3200	0	3000	3000	1500	0	1
10	250000	1	1	2	29	0	0	0	0	0	...	59696	56875	55512	3000	3000	3000	3000	3000	3000	0
11	50000	2	3	3	23	1	2	0	0	0	...	28771	29531	30211	0	1500	1100	1200	1300	1100	0
12	20000	1	1	2	24	0	0	2	2	2	...	18338	17905	19104	3200	0	1500	0	1650	0	1
13	320000	1	1	1	49	0	0	0	-1	-1	...	70074	5856	195599	10358	10000	75940	20000	195599	50000	0
14	360000	2	1	1	49	1	-2	-2	-2	-2	...	0	0	0	0	0	0	0	0	0	0
15 rows × 24 columns

data.columns
Index(['LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE', 'PAY_0', 'PAY_2',
       'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'BILL_AMT1', 'BILL_AMT2',
       'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1',
       'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6',
       'default payment next month'],
      dtype='object')
data.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1001 entries, 0 to 1000
Data columns (total 24 columns):
 #   Column                      Non-Null Count  Dtype
---  ------                      --------------  -----
 0   LIMIT_BAL                   1001 non-null   int64
 1   SEX                         1001 non-null   int64
 2   EDUCATION                   1001 non-null   int64
 3   MARRIAGE                    1001 non-null   int64
 4   AGE                         1001 non-null   int64
 5   PAY_0                       1001 non-null   int64
 6   PAY_2                       1001 non-null   int64
 7   PAY_3                       1001 non-null   int64
 8   PAY_4                       1001 non-null   int64
 9   PAY_5                       1001 non-null   int64
 10  PAY_6                       1001 non-null   int64
 11  BILL_AMT1                   1001 non-null   int64
 12  BILL_AMT2                   1001 non-null   int64
 13  BILL_AMT3                   1001 non-null   int64
 14  BILL_AMT4                   1001 non-null   int64
 15  BILL_AMT5                   1001 non-null   int64
 16  BILL_AMT6                   1001 non-null   int64
 17  PAY_AMT1                    1001 non-null   int64
 18  PAY_AMT2                    1001 non-null   int64
 19  PAY_AMT3                    1001 non-null   int64
 20  PAY_AMT4                    1001 non-null   int64
 21  PAY_AMT5                    1001 non-null   int64
 22  PAY_AMT6                    1001 non-null   int64
 23  default payment next month  1001 non-null   int64
dtypes: int64(24)
memory usage: 187.8 KB
data.isnull().sum()
LIMIT_BAL                     0
SEX                           0
EDUCATION                     0
MARRIAGE                      0
AGE                           0
PAY_0                         0
PAY_2                         0
PAY_3                         0
PAY_4                         0
PAY_5                         0
PAY_6                         0
BILL_AMT1                     0
BILL_AMT2                     0
BILL_AMT3                     0
BILL_AMT4                     0
BILL_AMT5                     0
BILL_AMT6                     0
PAY_AMT1                      0
PAY_AMT2                      0
PAY_AMT3                      0
PAY_AMT4                      0
PAY_AMT5                      0
PAY_AMT6                      0
default payment next month    0
dtype: int64
!pip install pandas-profiling

restart the kernal
from pandas_profiling import ProfileReport
profile = ProfileReport(data, title="Pandas Profiling Report")
profile.to_widgets()
Summarize dataset:   0%|          | 0/37 [00:00<?, ?it/s]
Generate report structure:   0%|          | 0/1 [00:00<?, ?it/s]
Render widgets:   0%|          | 0/1 [00:00<?, ?it/s]
VBox(children=(Tab(children=(Tab(children=(GridBox(children=(VBox(children=(GridspecLayout(children=(HTML(valu…
X=data.drop(labels=["default payment next month"],axis=1)
X
LIMIT_BAL	SEX	EDUCATION	MARRIAGE	AGE	PAY_0	PAY_2	PAY_3	PAY_4	PAY_5	...	BILL_AMT3	BILL_AMT4	BILL_AMT5	BILL_AMT6	PAY_AMT1	PAY_AMT2	PAY_AMT3	PAY_AMT4	PAY_AMT5	PAY_AMT6
0	50000	1	2	1	57	-1	0	-1	0	0	...	35835	20940	19146	19131	2000	36681	10000	9000	689	679
1	50000	1	1	2	37	0	0	0	0	0	...	57608	19394	19619	20024	2500	1815	657	1000	1000	800
2	500000	1	1	2	29	0	0	0	0	0	...	445007	542653	483003	473944	55000	40000	38000	20239	13750	13770
3	100000	2	2	2	23	0	-1	-1	0	0	...	601	221	-159	567	380	601	0	581	1687	1542
4	140000	2	3	1	28	0	0	2	0	0	...	12108	12211	11793	3719	3329	0	432	1000	1000	1000
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
996	100000	1	2	1	29	0	0	0	0	-1	...	67782	-2618	95748	101299	3320	5000	0	100000	7186	0
997	200000	2	2	1	28	0	0	0	0	0	...	8441	97041	103541	3632	5000	2000	89000	6500	91	1504
998	90000	2	2	1	40	-1	-1	-1	-1	-1	...	1114	657	1332	780	0	2806	2256	2274	780	0
999	360000	1	1	2	36	1	-2	-2	-2	-2	...	0	0	0	0	0	0	0	0	0	0
1000	150000	2	3	2	30	-2	-2	-2	-2	-2	...	3420	2527	0	0	9664	3420	2612	0	0	0
1001 rows × 23 columns

y=data["default payment next month"]
y
0       0
1       0
2       0
3       0
4       0
       ..
996     0
997     0
998     0
999     1
1000    1
Name: default payment next month, Length: 1001, dtype: int64
from sklearn.model_selection import train_test_split
#we did train and test split before only why because we dont want data leakage
x_train, x_test, y_train, y_test=train_test_split(X,y,test_size=0.25,random_state=50)
#preprocessing steps
from sklearn.preprocessing import StandardScaler
train_scaler=StandardScaler()
test_scaler=StandardScaler()
scaled_train_data=train_scaler.fit_transform(x_train)
scaled_test_data=train_scaler.transform(x_test)
from sklearn.naive_bayes import GaussianNB
clf = GaussianNB()
clf.fit(scaled_train_data,y_train)
GaussianNB()
y_pred=clf.predict(scaled_test_data)
from sklearn.metrics import accuracy_score 
accuracy_score(y_test,y_pred)*100
69.7211155378486
param_grid = {"var_smoothing": [1e-9,0.1, 0.001, 0.5,0.05,0.01,1e-8,1e-7,1e-6,1e-10,1e-11]}
from sklearn.model_selection import GridSearchCV
gs=GridSearchCV(clf,param_grid=param_grid,cv=5,verbose=3)
gs.fit(scaled_train_data,y_train)
Fitting 5 folds for each of 11 candidates, totalling 55 fits
[CV 1/5] END ...............var_smoothing=1e-09;, score=0.713 total time=   0.0s
[CV 2/5] END ...............var_smoothing=1e-09;, score=0.707 total time=   0.0s
[CV 3/5] END ...............var_smoothing=1e-09;, score=0.580 total time=   0.0s
[CV 4/5] END ...............var_smoothing=1e-09;, score=0.780 total time=   0.0s
[CV 5/5] END ...............var_smoothing=1e-09;, score=0.487 total time=   0.0s
[CV 1/5] END .................var_smoothing=0.1;, score=0.693 total time=   0.0s
[CV 2/5] END .................var_smoothing=0.1;, score=0.773 total time=   0.0s
[CV 3/5] END .................var_smoothing=0.1;, score=0.700 total time=   0.0s
[CV 4/5] END .................var_smoothing=0.1;, score=0.780 total time=   0.0s
[CV 5/5] END .................var_smoothing=0.1;, score=0.633 total time=   0.0s
[CV 1/5] END ...............var_smoothing=0.001;, score=0.713 total time=   0.0s
[CV 2/5] END ...............var_smoothing=0.001;, score=0.707 total time=   0.0s
[CV 3/5] END ...............var_smoothing=0.001;, score=0.593 total time=   0.0s
[CV 4/5] END ...............var_smoothing=0.001;, score=0.780 total time=   0.0s
[CV 5/5] END ...............var_smoothing=0.001;, score=0.487 total time=   0.0s
[CV 1/5] END .................var_smoothing=0.5;, score=0.740 total time=   0.0s
[CV 2/5] END .................var_smoothing=0.5;, score=0.807 total time=   0.0s
[CV 3/5] END .................var_smoothing=0.5;, score=0.767 total time=   0.0s
[CV 4/5] END .................var_smoothing=0.5;, score=0.793 total time=   0.0s
[CV 5/5] END .................var_smoothing=0.5;, score=0.773 total time=   0.0s
[CV 1/5] END ................var_smoothing=0.05;, score=0.700 total time=   0.0s
[CV 2/5] END ................var_smoothing=0.05;, score=0.747 total time=   0.0s
[CV 3/5] END ................var_smoothing=0.05;, score=0.647 total time=   0.0s
[CV 4/5] END ................var_smoothing=0.05;, score=0.787 total time=   0.0s
[CV 5/5] END ................var_smoothing=0.05;, score=0.540 total time=   0.0s
[CV 1/5] END ................var_smoothing=0.01;, score=0.720 total time=   0.0s
[CV 2/5] END ................var_smoothing=0.01;, score=0.713 total time=   0.0s
[CV 3/5] END ................var_smoothing=0.01;, score=0.607 total time=   0.0s
[CV 4/5] END ................var_smoothing=0.01;, score=0.780 total time=   0.0s
[CV 5/5] END ................var_smoothing=0.01;, score=0.500 total time=   0.0s
[CV 1/5] END ...............var_smoothing=1e-08;, score=0.713 total time=   0.0s
[CV 2/5] END ...............var_smoothing=1e-08;, score=0.707 total time=   0.0s
[CV 3/5] END ...............var_smoothing=1e-08;, score=0.580 total time=   0.0s
[CV 4/5] END ...............var_smoothing=1e-08;, score=0.780 total time=   0.0s
[CV 5/5] END ...............var_smoothing=1e-08;, score=0.487 total time=   0.0s
[CV 1/5] END ...............var_smoothing=1e-07;, score=0.713 total time=   0.0s
[CV 2/5] END ...............var_smoothing=1e-07;, score=0.707 total time=   0.0s
[CV 3/5] END ...............var_smoothing=1e-07;, score=0.580 total time=   0.0s
[CV 4/5] END ...............var_smoothing=1e-07;, score=0.780 total time=   0.0s
[CV 5/5] END ...............var_smoothing=1e-07;, score=0.487 total time=   0.0s
[CV 1/5] END ...............var_smoothing=1e-06;, score=0.713 total time=   0.0s
[CV 2/5] END ...............var_smoothing=1e-06;, score=0.707 total time=   0.0s
[CV 3/5] END ...............var_smoothing=1e-06;, score=0.580 total time=   0.0s
[CV 4/5] END ...............var_smoothing=1e-06;, score=0.780 total time=   0.0s
[CV 5/5] END ...............var_smoothing=1e-06;, score=0.487 total time=   0.0s
[CV 1/5] END ...............var_smoothing=1e-10;, score=0.713 total time=   0.0s
[CV 2/5] END ...............var_smoothing=1e-10;, score=0.707 total time=   0.0s
[CV 3/5] END ...............var_smoothing=1e-10;, score=0.580 total time=   0.0s
[CV 4/5] END ...............var_smoothing=1e-10;, score=0.780 total time=   0.0s
[CV 5/5] END ...............var_smoothing=1e-10;, score=0.487 total time=   0.0s
[CV 1/5] END ...............var_smoothing=1e-11;, score=0.713 total time=   0.0s
[CV 2/5] END ...............var_smoothing=1e-11;, score=0.707 total time=   0.0s
[CV 3/5] END ...............var_smoothing=1e-11;, score=0.580 total time=   0.0s
[CV 4/5] END ...............var_smoothing=1e-11;, score=0.780 total time=   0.0s
[CV 5/5] END ...............var_smoothing=1e-11;, score=0.487 total time=   0.0s
GridSearchCV(cv=5, estimator=GaussianNB(),
             param_grid={'var_smoothing': [1e-09, 0.1, 0.001, 0.5, 0.05, 0.01,
                                           1e-08, 1e-07, 1e-06, 1e-10, 1e-11]},
             verbose=3)
gs.cv_results_
{'mean_fit_time': array([0.0012022 , 0.00119801, 0.00100198, 0.0011023 , 0.00110197,
        0.0011013 , 0.00110111, 0.00110335, 0.0009994 , 0.00118608,
        0.00090308]),
 'std_fit_time': array([3.99073236e-04, 4.01422166e-04, 2.72507325e-06, 2.01670924e-04,
        2.01473941e-04, 2.01816921e-04, 2.02489482e-04, 2.03642094e-04,
        6.32489637e-04, 3.72076203e-04, 1.98482022e-04]),
 'mean_score_time': array([0.0007019 , 0.00030327, 0.00040088, 0.00019999, 0.00019999,
        0.00040088, 0.00040112, 0.0006    , 0.00051928, 0.00040011,
        0.00039992]),
 'std_score_time': array([0.00060169, 0.00040442, 0.00049098, 0.00039997, 0.00039997,
        0.00049098, 0.00049127, 0.0004899 , 0.00066188, 0.00049004,
        0.0004898 ]),
 'param_var_smoothing': masked_array(data=[1e-09, 0.1, 0.001, 0.5, 0.05, 0.01, 1e-08, 1e-07,
                    1e-06, 1e-10, 1e-11],
              mask=[False, False, False, False, False, False, False, False,
                    False, False, False],
        fill_value='?',
             dtype=object),
 'params': [{'var_smoothing': 1e-09},
  {'var_smoothing': 0.1},
  {'var_smoothing': 0.001},
  {'var_smoothing': 0.5},
  {'var_smoothing': 0.05},
  {'var_smoothing': 0.01},
  {'var_smoothing': 1e-08},
  {'var_smoothing': 1e-07},
  {'var_smoothing': 1e-06},
  {'var_smoothing': 1e-10},
  {'var_smoothing': 1e-11}],
 'split0_test_score': array([0.71333333, 0.69333333, 0.71333333, 0.74      , 0.7       ,
        0.72      , 0.71333333, 0.71333333, 0.71333333, 0.71333333,
        0.71333333]),
 'split1_test_score': array([0.70666667, 0.77333333, 0.70666667, 0.80666667, 0.74666667,
        0.71333333, 0.70666667, 0.70666667, 0.70666667, 0.70666667,
        0.70666667]),
 'split2_test_score': array([0.58      , 0.7       , 0.59333333, 0.76666667, 0.64666667,
        0.60666667, 0.58      , 0.58      , 0.58      , 0.58      ,
        0.58      ]),
 'split3_test_score': array([0.78      , 0.78      , 0.78      , 0.79333333, 0.78666667,
        0.78      , 0.78      , 0.78      , 0.78      , 0.78      ,
        0.78      ]),
 'split4_test_score': array([0.48666667, 0.63333333, 0.48666667, 0.77333333, 0.54      ,
        0.5       , 0.48666667, 0.48666667, 0.48666667, 0.48666667,
        0.48666667]),
 'mean_test_score': array([0.65333333, 0.716     , 0.656     , 0.776     , 0.684     ,
        0.664     , 0.65333333, 0.65333333, 0.65333333, 0.65333333,
        0.65333333]),
 'std_test_score': array([0.10549355, 0.05474791, 0.10376041, 0.02293953, 0.08585259,
        0.09920573, 0.10549355, 0.10549355, 0.10549355, 0.10549355,
        0.10549355]),
 'rank_test_score': array([6, 2, 5, 1, 3, 4, 6, 6, 6, 6, 6])}
gs.best_estimator_
GaussianNB(var_smoothing=0.5)
clf2 = GaussianNB(var_smoothing=0.5)
clf2.fit(scaled_train_data,y_train)
y_pred2=clf2.predict(scaled_test_data)
accuracy_score(y_test,y_pred2)*100
80.0796812749004
xgboost?
random forst?
from xgboost import XGBClassifier
xgb=XGBClassifier()
xgb.fit(scaled_train_data,y_train)
XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, gamma=0, gpu_id=-1, grow_policy='depthwise',
              importance_type=None, interaction_constraints='',
              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,
              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,
              missing=nan, monotone_constraints='()', n_estimators=100,
              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,
              reg_alpha=0, reg_lambda=1, ...)
y_pred3=xgb.predict(scaled_test_data)
accuracy_score(y_test,y_pred3)
0.7689243027888446
param_grid_xgboost = { "n_estimators": [50,100, 130],
                        "max_depth": range(3,11,1),
                      "random_state":[0,50,100]
                     }

# Creating an object of the Grid Search class
grid= GridSearchCV(XGBClassifier(objective='binary:logistic'),param_grid_xgboost,verbose=3,cv=5,n_jobs=-1)
grid.fit(scaled_train_data,y_train)
Fitting 5 folds for each of 72 candidates, totalling 360 fits
GridSearchCV(cv=5,
             estimator=XGBClassifier(base_score=None, booster=None,
                                     callbacks=None, colsample_bylevel=None,
                                     colsample_bynode=None,
                                     colsample_bytree=None,
                                     early_stopping_rounds=None,
                                     enable_categorical=False, eval_metric=None,
                                     gamma=None, gpu_id=None, grow_policy=None,
                                     importance_type=None,
                                     interaction_constraints=None,
                                     learning_rate=None, max_bin=None,
                                     max_ca...t=None,
                                     max_delta_step=None, max_depth=None,
                                     max_leaves=None, min_child_weight=None,
                                     missing=nan, monotone_constraints=None,
                                     n_estimators=100, n_jobs=None,
                                     num_parallel_tree=None, predictor=None,
                                     random_state=None, reg_alpha=None,
                                     reg_lambda=None, ...),
             n_jobs=-1,
             param_grid={'max_depth': range(3, 11),
                         'n_estimators': [50, 100, 130],
                         'random_state': [0, 50, 100]},
             verbose=3)
grid.best_estimator_
XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, gamma=0, gpu_id=-1, grow_policy='depthwise',
              importance_type=None, interaction_constraints='',
              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,
              max_delta_step=0, max_depth=4, max_leaves=0, min_child_weight=1,
              missing=nan, monotone_constraints='()', n_estimators=100,
              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,
              reg_alpha=0, reg_lambda=1, ...)
grid.best_params_
{'max_depth': 4, 'n_estimators': 100, 'random_state': 0}
xgb_new=XGBClassifier(max_depth=4, n_estimators=90, random_state=0)
y_pred4=xgb_new.fit(scaled_train_data,y_train).predict(scaled_test_data)
accuracy_score(y_test,y_pred4)
0.7848605577689243
 
